package View.Admin.panels;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JTextField;

import Dao.AccountDao;
import Enum.AccountEnum;
import Model.Account;
import View.Admin.common.BasePanel;
import View.Admin.common.ButtonPanel;
import View.Admin.common.FormPanel;
import View.Admin.common.SearchPanel;

public class AccountsPanel extends BasePanel {

	public AccountsPanel() {
		super("Qu·∫£n l√Ω t√†i kho·∫£n", "üë§");
	}

	@Override
	protected void createComponents() {
		// T·∫°o search panel
		String[] fieldLabels = { "T√™n ƒëƒÉng nh·∫≠p" };
		String[] comboLabels = { "Quy·ªÅn", "Tr·∫°ng th√°i" };
		String[][] comboOptions = { { "T·∫•t c·∫£", "Admin", "User", "Manager" },
				{ "T·∫•t c·∫£", "Active", "Inactive", "Suspended" } };

		searchPanel = new SearchPanel(fieldLabels, comboLabels, comboOptions);

		// T·∫°o table
		String[] columns = { "ID", "T√™n ƒëƒÉng nh·∫≠p", "M·∫≠t kh·∫©u", "Quy·ªÅn", "Tr·∫°ng th√°i", "Ng√†y t·∫°o", "Ng√†y k·∫øt th√∫c",
				"T√™n ng∆∞·ªùi d√πng", "Avatar" };
		table = createStyledTable(columns);

		// T·∫°o form panel
		String[] formFieldLabels = { "ID", "T√™n ƒëƒÉng nh·∫≠p", "M·∫≠t kh·∫©u", "Ng√†y t·∫°o", "Ng√†y k·∫øt th√∫c", "T√™n ng∆∞·ªùi d√πng",
				"Avatar" };
		String[] formComboLabels = { "Quy·ªÅn", "Tr·∫°ng th√°i" };
		String[][] formComboOptions = { { "Admin", "User", "Manager" }, { "Active", "Inactive", "Suspended" } };
		formPanel = new FormPanel("Th√¥ng tin t√†i kho·∫£n", formFieldLabels, formComboLabels, formComboOptions);

		// T·∫°o button panel
		buttonPanel = new ButtonPanel(new String[] {});
	}

	@Override
	protected void addSampleData() {
		tableModel.setRowCount(0);

		List<Account> accounts = AccountDao.getAll();
		for (Account acc : accounts) {
			Object[] row = { acc.getAccountId(), acc.getUsername(), acc.getPassword(),
					acc.getRole() != null ? acc.getRole().getValue() : "",
					acc.getStatus() != null ? acc.getStatus().getValue() : "",
					acc.getCreatedAt() != null ? acc.getCreatedAt().toString() : "",
					acc.getUpdatedAt() != null ? acc.getUpdatedAt().toString() : "",
					acc.getDisplayName() != null ? acc.getDisplayName() : "",
					acc.getAvatar() != null ? acc.getAvatar() : "" };
			tableModel.addRow(row);
		}
	}

	@Override
	protected void displaySelectedRowData() {
		int selectedRow = table.getSelectedRow();
		if (selectedRow != -1) {
			formPanel.setTextFieldValue(0, table.getValueAt(selectedRow, 0).toString()); // ID
			formPanel.setTextFieldValue(1, table.getValueAt(selectedRow, 1).toString()); // username
			formPanel.setTextFieldValue(2, table.getValueAt(selectedRow, 2).toString()); // password
			formPanel.setTextFieldValue(3, table.getValueAt(selectedRow, 5).toString()); // Ng√†y t·∫°o
			formPanel.setTextFieldValue(4, table.getValueAt(selectedRow, 6).toString()); // Ng√†y k·∫øt th√∫c
			formPanel.setTextFieldValue(5, table.getValueAt(selectedRow, 7).toString()); // T√™n ng∆∞·ªùi d√πng
			formPanel.setTextFieldValue(6, table.getValueAt(selectedRow, 8).toString()); // Avatar
			formPanel.setComboBoxValue(0, table.getValueAt(selectedRow, 3).toString()); // Quy·ªÅn
			formPanel.setComboBoxValue(1, table.getValueAt(selectedRow, 4).toString()); // Tr·∫°ng th√°i
		}
	}

	@Override
	protected void clearForm() {
		formPanel.clearForm();
	}

	@Override
	protected Map<String, String> getFormData() {
		Map<String, String> data = new HashMap<>();
		data.put("id", formPanel.getTextFieldValue(0));
		data.put("username", formPanel.getTextFieldValue(1));
		data.put("password", formPanel.getTextFieldValue(2));
		data.put("createdAt", formPanel.getTextFieldValue(3));
		data.put("updatedAt", formPanel.getTextFieldValue(4));
		data.put("displayName", formPanel.getTextFieldValue(5));
		data.put("avatar", formPanel.getTextFieldValue(6));
		data.put("role", formPanel.getComboBoxValue(0));
		data.put("status", formPanel.getComboBoxValue(1));
		return data;
	}

	@Override
	protected void handleEdit(int selectedRow) {
		if (selectedRow == -1) {
			JOptionPane.showMessageDialog(this, "Vui l√≤ng ch·ªçn t√†i kho·∫£n ƒë·ªÉ s·ª≠a!");
			return;
		}
		Map<String, String> data = getFormData();
		try {
			int id = Integer.parseInt(data.get("id"));
			Map<String, Object> updateFields = new HashMap<>();
			// C·∫≠p nh·∫≠t t·∫•t c·∫£ c√°c tr∆∞·ªùng cho ph√©p
			updateFields.put("password", data.get("password"));
			updateFields.put("role", data.get("role"));
			updateFields.put("status", data.get("status"));
			updateFields.put("display_name", data.get("displayName"));
			updateFields.put("avatar", data.get("avatar"));
			updateFields.put("username", data.get("username"));
			// N·∫øu mu·ªën c·∫≠p nh·∫≠t th√™m tr∆∞·ªùng kh√°c, c·∫ßn s·ª≠a AccountDao cho ph√©p

			boolean success = Dao.AccountDao.update(id, updateFields);
			if (success) {
				JOptionPane.showMessageDialog(this, "C·∫≠p nh·∫≠t th√†nh c√¥ng!");
				addSampleData(); // L√†m m·ªõi b·∫£ng
			} else {
				JOptionPane.showMessageDialog(this, "C·∫≠p nh·∫≠t th·∫•t b·∫°i!");
			}
		} catch (Exception e) {
			JOptionPane.showMessageDialog(this, "L·ªói: " + e.getMessage());
			e.printStackTrace();
		}
	}

	@Override
	protected void handleAdd() {
		Map<String, String> data = getFormData();
		// Ki·ªÉm tra d·ªØ li·ªáu b·∫Øt bu·ªôc
		if (data.get("username").isEmpty() || data.get("password").isEmpty() || data.get("role").isEmpty()
				|| data.get("status").isEmpty() || data.get("displayName").isEmpty()) {
			JOptionPane.showMessageDialog(this, "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin t√†i kho·∫£n!");
			return;
		}
		try {
			// L·∫•y role v√† status ƒë√∫ng ki·ªÉu enum
			AccountEnum.Role role = AccountEnum.Role.fromValue(data.get("role"));
			AccountEnum.Status status = AccountEnum.Status.fromValue(data.get("status"));
			// G·ªçi register
			Account acc = AccountDao.register(data.get("username"), data.get("password"), data.get("displayName"),
					data.get("avatar"), role);
			if (acc != null) {
				// Sau khi th√™m, c·∫≠p nh·∫≠t tr·∫°ng th√°i n·∫øu c·∫ßn
				if (!acc.getStatus().equals(status)) {
					java.util.HashMap<String, Object> updateFields = new java.util.HashMap<>();
					updateFields.put("status", status.getValue());
					AccountDao.update(acc.getAccountId(), updateFields);
				}
				JOptionPane.showMessageDialog(this, "Th√™m t√†i kho·∫£n th√†nh c√¥ng!");
				addSampleData();
				clearForm();
			} else {
				JOptionPane.showMessageDialog(this, "Th√™m t√†i kho·∫£n th·∫•t b·∫°i!");
			}
		} catch (Exception e) {
			JOptionPane.showMessageDialog(this, "L·ªói: " + e.getMessage());
			e.printStackTrace();
		}
	}

	@Override
	protected void handleSearch() {
		JTextField[] searchFields = searchPanel.getSearchFields();
		JComboBox<String>[] searchCombos = searchPanel.getSearchCombos();

		String username = searchFields[0].getText().trim();
		String role = searchCombos[0].getSelectedItem().toString();
		// N·∫øu c√≥ th√™m combo tr·∫°ng th√°i th√¨ l·∫•y searchCombos[1]

		// X√≥a d·ªØ li·ªáu c≈© tr√™n b·∫£ng
		tableModel.setRowCount(0);

		// L·∫•y danh s√°ch t√†i kho·∫£n t·ª´ DB
		List<Account> accounts = AccountDao.getAll();
		for (Account acc : accounts) {
			boolean match = true;
			// L·ªçc theo username b·∫Øt ƒë·∫ßu b·∫±ng
			if (!username.isEmpty() && !acc.getUsername().toLowerCase().startsWith(username.toLowerCase())) {
				match = false;
			}
			// L·ªçc theo quy·ªÅn
			if (!role.equals("T·∫•t c·∫£") && (acc.getRole() == null || !acc.getRole().getValue().equals(role))) {
				match = false;
			}
			if (match) {
				Object[] row = { acc.getAccountId(), acc.getUsername(), acc.getPassword(),
						acc.getRole() != null ? acc.getRole().getValue() : "",
						acc.getStatus() != null ? acc.getStatus().getValue() : "",
						acc.getCreatedAt() != null ? acc.getCreatedAt().toString() : "",
						acc.getUpdatedAt() != null ? acc.getUpdatedAt().toString() : "",
						acc.getDisplayName() != null ? acc.getDisplayName() : "",
						acc.getAvatar() != null ? acc.getAvatar() : "" };
				tableModel.addRow(row);
			}
		}
	}

	@Override
	protected void handleDelete(int selectedRow) {
		if (selectedRow == -1) {
			JOptionPane.showMessageDialog(this, "Vui l√≤ng ch·ªçn t√†i kho·∫£n ƒë·ªÉ x√≥a!");
			return;
		}
		int id;
		try {
			id = Integer.parseInt(table.getValueAt(selectedRow, 0).toString());
		} catch (Exception e) {
			JOptionPane.showMessageDialog(this, "Kh√¥ng th·ªÉ x√°c ƒë·ªãnh ID t√†i kho·∫£n!");
			return;
		}
		int confirm = JOptionPane.showConfirmDialog(this, "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a t√†i kho·∫£n n√†y?", "X√°c nh·∫≠n x√≥a",
				JOptionPane.YES_NO_OPTION);
		if (confirm == JOptionPane.YES_OPTION) {
			boolean success = Dao.AccountDao.delete(id);
			if (success) {
				JOptionPane.showMessageDialog(this, "X√≥a t√†i kho·∫£n th√†nh c√¥ng!");
				addSampleData(); // L√†m m·ªõi b·∫£ng
			} else {
				JOptionPane.showMessageDialog(this, "X√≥a t√†i kho·∫£n th·∫•t b·∫°i!");
			}
		}
	}
}
