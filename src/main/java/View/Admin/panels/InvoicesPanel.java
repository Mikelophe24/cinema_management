package View.Admin.panels;

import View.Admin.common.*;
import javax.swing.*;
import java.util.HashMap;
import java.util.Map;
import java.util.List;
import Dao.InvoiceDao;
import Dao.AccountDao;
import Model.Invoice;
import Model.Account;

public class InvoicesPanel extends BasePanel {
    
    public InvoicesPanel() {
        super("Qu·∫£n l√Ω h√≥a ƒë∆°n", "üßæ");
    }
    
    @Override
    protected void createComponents() {
        // T·∫°o search panel - ch·ªâ c√≥ m√£ HD v√† kh√°ch h√†ng
        String[] fieldLabels = {"M√£ HD", "Kh√°ch h√†ng"};
        String[] comboLabels = {};
        String[][] comboOptions = {};
        
        searchPanel = new SearchPanel(fieldLabels, comboLabels, comboOptions);
        
        // T·∫°o table - b·ªè qua ph∆∞∆°ng th·ª©c v√† tr·∫°ng th√°i
        String[] columns = {"ID", "M√£ HD", "Kh√°ch h√†ng", "T·ªïng ti·ªÅn", "Ng√†y t·∫°o"};
        table = createStyledTable(columns);
        
        // T·∫°o form panel - ch·ªâ c√≥ m√£ HD, kh√°ch h√†ng (text field), t·ªïng ti·ªÅn
        String[] formFieldLabels = {"M√£ HD", "Kh√°ch h√†ng", "T·ªïng ti·ªÅn"};
        String[] formComboLabels = {};
        String[][] formComboOptions = {};
        
        formPanel = new FormPanel("Th√¥ng tin h√≥a ƒë∆°n", formFieldLabels, formComboLabels, formComboOptions);
        
        // T·∫°o button panel
        buttonPanel = new ButtonPanel(new String[]{});
    }
    
    @Override
    protected void addSampleData() {
        try {
            tableModel.setRowCount(0); // Clear existing data
            List<Invoice> invoices = InvoiceDao.queryList();
            
            if (invoices != null && !invoices.isEmpty()) {
                for (Invoice invoice : invoices) {
                    Account account = AccountDao.getById(invoice.getAccountId());
                    String customerName = account != null ? account.getDisplayName() : "Kh√¥ng x√°c ƒë·ªãnh";
                    
                    System.out.println("Invoice ID: " + invoice.getId() + ", Account ID: " + invoice.getAccountId() + ", Customer Name: '" + customerName + "'");
                    
                    Object[] row = {
                        invoice.getId(),
                        "HD" + String.format("%03d", invoice.getId()),
                        customerName,
                        String.format("%,.0f VNƒê", invoice.getTotalAmount()),
                        invoice.getBookingDate() != null ? invoice.getBookingDate().toString() : ""
                    };
                    tableModel.addRow(row);
                }
                System.out.println("ƒê√£ t·∫£i " + invoices.size() + " h√≥a ƒë∆°n t·ª´ database");
            } else {
                System.out.println("Kh√¥ng c√≥ h√≥a ƒë∆°n n√†o trong database");
            }
        } catch (Exception e) {
            System.err.println("L·ªói khi t·∫£i danh s√°ch h√≥a ƒë∆°n: " + e.getMessage());
            e.printStackTrace();
        }
    }
    
    @Override
    protected void displaySelectedRowData() {
        int selectedRow = table.getSelectedRow();
        if (selectedRow != -1) {
            // L·∫•y m√£ HD t·ª´ c·ªôt 1
            String invoiceCode = table.getValueAt(selectedRow, 1).toString();
            formPanel.setTextFieldValue(0, invoiceCode);
            
            // L·∫•y t√™n kh√°ch h√†ng t·ª´ c·ªôt 2 v√† set v√†o text field
            String customerName = table.getValueAt(selectedRow, 2).toString();
            System.out.println("=== DEBUG: Hi·ªÉn th·ªã d·ªØ li·ªáu t·ª´ b·∫£ng ===");
            System.out.println("T√™n kh√°ch h√†ng t·ª´ b·∫£ng: '" + customerName + "'");
            formPanel.setTextFieldValue(1, customerName);
            
            // L·∫•y t·ªïng ti·ªÅn t·ª´ c·ªôt 3 (lo·∫°i b·ªè " VNƒê")
            String totalAmountText = table.getValueAt(selectedRow, 3).toString();
            String totalAmount = totalAmountText.replace(" VNƒê", "").replace(",", "");
            formPanel.setTextFieldValue(2, totalAmount);
        }
    }
    
    @Override
    protected void clearForm() {
        formPanel.clearForm();
    }
    
    @Override
    protected Map<String, String> getFormData() {
        Map<String, String> data = new HashMap<>();
        data.put("invoiceCode", formPanel.getTextFieldValue(0));
        data.put("customer", formPanel.getTextFieldValue(1));
        data.put("totalAmount", formPanel.getTextFieldValue(2));
        
        System.out.println("=== DEBUG: L·∫•y d·ªØ li·ªáu t·ª´ form ===");
        System.out.println("T√™n kh√°ch h√†ng t·ª´ form: '" + data.get("customer") + "'");
        
        return data;
    }
    
    @Override
    protected void handleEdit(int selectedRow) {
        // T·∫°m th·ªùi ·∫©n ch·ª©c nƒÉng s·ª≠a invoice
        JOptionPane.showMessageDialog(this, "Ch·ª©c nƒÉng s·ª≠a h√≥a ƒë∆°n ƒëang ƒë∆∞·ª£c b·∫£o tr√¨!", "Th√¥ng b√°o", JOptionPane.INFORMATION_MESSAGE);
        
        /*
        try {
            Map<String, String> data = getFormData();
            
            // L·∫•y ID c·ªßa invoice t·ª´ b·∫£ng
            Object invoiceIdObj = tableModel.getValueAt(selectedRow, 0);
            if (invoiceIdObj == null) {
                JOptionPane.showMessageDialog(this, "Kh√¥ng t√¨m th·∫•y ID c·ªßa h√≥a ƒë∆°n!", "L·ªói", JOptionPane.ERROR_MESSAGE);
                return;
            }
            int invoiceId = Integer.parseInt(invoiceIdObj.toString());
            
            // Parse t·ªïng ti·ªÅn
            double totalAmount = 0.0;
            try {
                totalAmount = Double.parseDouble(data.get("totalAmount"));
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "T·ªïng ti·ªÅn kh√¥ng h·ª£p l·ªá!", "L·ªói", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            // T√¨m account ID t·ª´ t√™n kh√°ch h√†ng
            List<Account> accounts = AccountDao.getAll();
            int accountId = -1;
            String customerName = data.get("customer");
            
            System.out.println("=== DEBUG: T√¨m kh√°ch h√†ng ===");
            System.out.println("T√™n kh√°ch h√†ng c·∫ßn t√¨m: '" + customerName + "'");
            System.out.println("T·ªïng s·ªë accounts: " + accounts.size());
            
            for (Account account : accounts) {
                String accountDisplayName = account.getDisplayName();
                System.out.println("Account ID: " + account.getAccountId() + ", Display Name: '" + accountDisplayName + "'");
                
                if (accountDisplayName != null && accountDisplayName.equals(customerName)) {
                    accountId = account.getAccountId();
                    System.out.println("T√¨m th·∫•y! Account ID: " + accountId);
                    break;
                } else if (accountDisplayName != null && accountDisplayName.trim().equals(customerName.trim())) {
                    accountId = account.getAccountId();
                    System.out.println("T√¨m th·∫•y (sau trim)! Account ID: " + accountId);
                    break;
                } else if (accountDisplayName != null) {
                    System.out.println("So s√°nh: '" + accountDisplayName + "' vs '" + customerName + "'");
                    System.out.println("Length: " + accountDisplayName.length() + " vs " + customerName.length());
                    System.out.println("Equals: " + accountDisplayName.equals(customerName));
                    System.out.println("Trim equals: " + accountDisplayName.trim().equals(customerName.trim()));
                }
            }
            
            if (accountId == -1) {
                System.out.println("Kh√¥ng t√¨m th·∫•y kh√°ch h√†ng v·ªõi t√™n: '" + customerName + "'");
                JOptionPane.showMessageDialog(this, "Kh√¥ng t√¨m th·∫•y kh√°ch h√†ng: " + customerName, "L·ªói", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            // T·∫°o Map ƒë·ªÉ update
            Map<String, Object> updateFields = new HashMap<>();
            updateFields.put("account_id", accountId);
            updateFields.put("total_amount", totalAmount);
            
            System.out.println("Update fields: " + updateFields);
            
            // G·ªçi API update
            boolean updated = InvoiceDao.update(invoiceId, updateFields);
            
            if (updated) {
                // Reload l·∫°i b·∫£ng
                tableModel.setRowCount(0);
                addSampleData();
                clearForm();
                JOptionPane.showMessageDialog(this, "C·∫≠p nh·∫≠t h√≥a ƒë∆°n th√†nh c√¥ng!", "Th√†nh c√¥ng", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "C·∫≠p nh·∫≠t h√≥a ƒë∆°n th·∫•t b·∫°i!", "L·ªói", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "L·ªói khi c·∫≠p nh·∫≠t h√≥a ƒë∆°n: " + e.getMessage(), "L·ªói", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
        */
    }
    
    @Override
    protected void handleAdd() {
        try {
            Map<String, String> data = getFormData();
            
            // Parse t·ªïng ti·ªÅn
            double totalAmount = 0.0;
            try {
                totalAmount = Double.parseDouble(data.get("totalAmount"));
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "T·ªïng ti·ªÅn kh√¥ng h·ª£p l·ªá!", "L·ªói", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            // T√¨m account ID t·ª´ t√™n kh√°ch h√†ng
            List<Account> accounts = AccountDao.getAll();
            int accountId = -1;
            String customerName = data.get("customer");
            
            System.out.println("=== DEBUG: Th√™m h√≥a ƒë∆°n ===");
            System.out.println("T√™n kh√°ch h√†ng c·∫ßn t√¨m: '" + customerName + "'");
            System.out.println("T·ªïng s·ªë accounts: " + accounts.size());
            
            for (Account account : accounts) {
                String accountDisplayName = account.getDisplayName();
                System.out.println("Account ID: " + account.getAccountId() + ", Display Name: '" + accountDisplayName + "'");
                
                if (accountDisplayName != null && accountDisplayName.equals(customerName)) {
                    accountId = account.getAccountId();
                    System.out.println("T√¨m th·∫•y! Account ID: " + accountId);
                    break;
                }
            }
            
            if (accountId == -1) {
                System.out.println("Kh√¥ng t√¨m th·∫•y kh√°ch h√†ng v·ªõi t√™n: '" + customerName + "'");
                JOptionPane.showMessageDialog(this, "Kh√¥ng t√¨m th·∫•y kh√°ch h√†ng: " + customerName, "L·ªói", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            // T·∫°o Invoice v√† l∆∞u v√†o DB - s·ª≠ d·ª•ng constructor ƒë√∫ng
            Invoice invoice = new Invoice(0, accountId, 0, totalAmount, null);
            InvoiceDao.create(invoice);
            
            // Reload l·∫°i b·∫£ng
            tableModel.setRowCount(0);
            addSampleData();
            clearForm();
            JOptionPane.showMessageDialog(this, "Th√™m h√≥a ƒë∆°n th√†nh c√¥ng!", "Th√†nh c√¥ng", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "L·ªói khi th√™m h√≥a ƒë∆°n: " + e.getMessage(), "L·ªói", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }
    
    @Override
    protected void handleSearch() {
        try {
            // L·∫•y gi√° tr·ªã t·ª´ search fields
            JTextField[] searchFields = searchPanel.getSearchFields();
            String invoiceCode = searchFields[0].getText().trim();
            String customer = searchFields[1].getText().trim();
            
            System.out.println("=== DEBUG: T√¨m ki·∫øm ===");
            System.out.println("M√£ HD: '" + invoiceCode + "'");
            System.out.println("Kh√°ch h√†ng: '" + customer + "'");
            
            // L·∫•y danh s√°ch h√≥a ƒë∆°n t·ª´ database
            List<Invoice> invoices = InvoiceDao.queryList();
            List<Account> accounts = AccountDao.getAll();
            
            // L·ªçc k·∫øt qu·∫£ t√¨m ki·∫øm
            List<Invoice> searchResults = new java.util.ArrayList<>();
            
            for (Invoice invoice : invoices) {
                Account account = AccountDao.getById(invoice.getAccountId());
                String customerName = account != null ? account.getDisplayName() : "";
                String currentInvoiceCode = "HD" + String.format("%03d", invoice.getId());
                
                boolean matchInvoiceCode = invoiceCode.isEmpty() || currentInvoiceCode.toLowerCase().contains(invoiceCode.toLowerCase());
                boolean matchCustomer = customer.isEmpty() || customerName.toLowerCase().contains(customer.toLowerCase());
                
                if (matchInvoiceCode && matchCustomer) {
                    searchResults.add(invoice);
                }
            }
            
            // Hi·ªÉn th·ªã k·∫øt qu·∫£ t√¨m ki·∫øm
            displaySearchResults(searchResults, accounts);
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "L·ªói khi t√¨m ki·∫øm: " + e.getMessage(), "L·ªói", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }
    
    private void displaySearchResults(List<Invoice> invoices, List<Account> accounts) {
        // X√≥a d·ªØ li·ªáu c≈© trong b·∫£ng
        tableModel.setRowCount(0);
        
        if (invoices != null && !invoices.isEmpty()) {
            for (Invoice invoice : invoices) {
                Account account = AccountDao.getById(invoice.getAccountId());
                String customerName = account != null ? account.getDisplayName() : "Kh√¥ng x√°c ƒë·ªãnh";
                Object[] row = {
                    invoice.getId(),
                    "HD" + String.format("%03d", invoice.getId()),
                    customerName,
                    String.format("%,.0f VNƒê", invoice.getTotalAmount()),
                    invoice.getBookingDate() != null ? invoice.getBookingDate().toString() : ""
                };
                tableModel.addRow(row);
            }
            System.out.println("T√¨m th·∫•y " + invoices.size() + " h√≥a ƒë∆°n");
        } else {
            System.out.println("Kh√¥ng t√¨m th·∫•y h√≥a ƒë∆°n n√†o");
        }
    }
    
    @Override
    protected void handleDelete(int selectedRow) {
        try {
            // L·∫•y ID c·ªßa invoice t·ª´ b·∫£ng
            Object invoiceIdObj = tableModel.getValueAt(selectedRow, 0);
            if (invoiceIdObj == null) {
                JOptionPane.showMessageDialog(this, "Kh√¥ng t√¨m th·∫•y ID c·ªßa h√≥a ƒë∆°n!", "L·ªói", JOptionPane.ERROR_MESSAGE);
                return;
            }
            int invoiceId = Integer.parseInt(invoiceIdObj.toString());
            
            // Hi·ªÉn th·ªã dialog x√°c nh·∫≠n
            int confirm = JOptionPane.showConfirmDialog(
                this, 
                "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a h√≥a ƒë∆°n n√†y?", 
                "X√°c nh·∫≠n x√≥a", 
                JOptionPane.YES_NO_OPTION
            );
            
            if (confirm == JOptionPane.YES_OPTION) {
                // G·ªçi API delete
                boolean deleted = InvoiceDao.deleteById(invoiceId);
                
                if (deleted) {
                    // Reload l·∫°i b·∫£ng
                    tableModel.setRowCount(0);
                    addSampleData();
                    clearForm();
                    JOptionPane.showMessageDialog(this, "X√≥a h√≥a ƒë∆°n th√†nh c√¥ng!", "Th√†nh c√¥ng", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(this, "X√≥a h√≥a ƒë∆°n th·∫•t b·∫°i!", "L·ªói", JOptionPane.ERROR_MESSAGE);
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "L·ªói khi x√≥a h√≥a ƒë∆°n: " + e.getMessage(), "L·ªói", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }
    
    @Override
    protected void setupListeners() {
        super.setupListeners();
        
        // ·∫®n n√∫t Edit
        if (buttonPanel != null && buttonPanel.getBtnEdit() != null) {
            buttonPanel.getBtnEdit().setVisible(false);
        }
        
        // Override n√∫t Refresh ƒë·ªÉ reload d·ªØ li·ªáu
        if (buttonPanel != null) {
            buttonPanel.getBtnRefresh().removeActionListener(buttonPanel.getBtnRefresh().getActionListeners()[0]);
            buttonPanel.getBtnRefresh().addActionListener(e -> {
                try {
                    // X√≥a d·ªØ li·ªáu c≈© trong b·∫£ng
                    tableModel.setRowCount(0);
                    
                    // Reload l·∫°i d·ªØ li·ªáu t·ª´ database
                    addSampleData();
                    
                    // Clear form
                    clearForm();
                    
                    // Clear search fields
                    JTextField[] searchFields = searchPanel.getSearchFields();
                    for (JTextField field : searchFields) {
                        field.setText("");
                    }
                    
                    // Reset selection
                    table.clearSelection();
                    buttonPanel.getBtnEdit().setEnabled(false);
                    buttonPanel.getBtnDelete().setEnabled(false);
                    buttonPanel.getBtnAdd().setVisible(true);
                    for (JButton btn : buttonPanel.getSpecialButtons()) {
                        btn.setEnabled(false);
                    }
                    
                    System.out.println("ƒê√£ l√†m m·ªõi danh s√°ch h√≥a ƒë∆°n");
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(this, "L·ªói khi l√†m m·ªõi: " + ex.getMessage(), "L·ªói", JOptionPane.ERROR_MESSAGE);
                    ex.printStackTrace();
                }
            });
        }
    }
} 