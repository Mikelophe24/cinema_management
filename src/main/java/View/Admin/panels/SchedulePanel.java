package View.Admin.panels;

import View.Admin.common.*;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import java.util.HashMap;
import java.util.Map;

public class SchedulePanel extends BasePanel {
    public SchedulePanel() {
        super("Qu·∫£n l√Ω l·ªãch chi·∫øu phim", "üóìÔ∏è");
    }

    @Override
    protected void createComponents() {
        // SearchPanel: ch·ªâ c√≥ tr∆∞·ªùng text
        String[] searchFieldLabels = {"Phim", "Ph√≤ng"};
        String[] searchComboLabels = {};
        String[][] searchComboOptions = {};
        searchPanel = new SearchPanel(searchFieldLabels, searchComboLabels, searchComboOptions);

        // Table
        String[] columns = {"Ng√†y", "Gi·ªù", "Phim", "Ph√≤ng"};
        table = createStyledTable(columns);

        // FormPanel: ch·ªâ c√≥ tr∆∞·ªùng text
        String[] formFieldLabels = {"Ng√†y", "Gi·ªù", "Phim", "Ph√≤ng"};
        String[] formComboLabels = {};
        String[][] formComboOptions = {};
        formPanel = new FormPanel("Th√¥ng tin l·ªãch chi·∫øu", formFieldLabels, formComboLabels, formComboOptions);

        // ButtonPanel: kh√¥ng c√≥ button ƒë·∫∑c bi·ªát
        buttonPanel = new ButtonPanel(new String[]{});
    }

    @Override
    protected void addSampleData() {
        Object[][] sampleData = {
            {"2024-05-20", "10:00", "Avengers: Endgame", "Ph√≤ng 1"},
            {"2024-05-20", "13:00", "Titanic", "Ph√≤ng 2"},
            {"2024-05-20", "15:30", "The Dark Knight", "Ph√≤ng 3"},
            {"2024-05-21", "09:00", "Frozen", "Ph√≤ng 5"},
            {"2024-05-21", "11:00", "Inception", "Ph√≤ng 4"},
            {"2024-05-21", "14:00", "The Matrix", "Ph√≤ng 1"}
        };
        for (Object[] row : sampleData) {
            tableModel.addRow(row);
        }
    }

    @Override
    protected void displaySelectedRowData() {
        int row = table.getSelectedRow();
        if (row != -1) {
            for (int i = 0; i < 4; i++) {
                formPanel.setTextFieldValue(i, tableModel.getValueAt(row, i).toString());
            }
        }
    }

    @Override
    protected void clearForm() {
        formPanel.clearForm();
    }

    @Override
    protected Map<String, String> getFormData() {
        Map<String, String> data = new HashMap<>();
        data.put("Ng√†y", formPanel.getTextFieldValue(0));
        data.put("Gi·ªù", formPanel.getTextFieldValue(1));
        data.put("Phim", formPanel.getTextFieldValue(2));
        data.put("Ph√≤ng", formPanel.getTextFieldValue(3));
        return data;
    }

    @Override
    protected void handleEdit(int selectedRow) {
        Map<String, String> data = getFormData();
        for (int i = 0; i < 4; i++) {
            tableModel.setValueAt(data.values().toArray()[i], selectedRow, i);
        }
    }

    @Override
    protected void handleAdd() {
        Map<String, String> data = getFormData();
        tableModel.addRow(new Object[]{
            data.get("Ng√†y"),
            data.get("Gi·ªù"),
            data.get("Phim"),
            data.get("Ph√≤ng")
        });
        clearForm();
    }

    @Override
    protected void handleSearch() {
        JTextField[] searchFields = searchPanel.getSearchFields();
        String movie = searchFields[0].getText().trim().toLowerCase();
        String room = searchFields[1].getText().trim().toLowerCase();
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(tableModel);
        table.setRowSorter(sorter);
        RowFilter<DefaultTableModel, Object> filter = RowFilter.regexFilter("(?i)" + movie, 2);
        if (!room.isEmpty()) {
            filter = RowFilter.andFilter(java.util.Arrays.asList(
                RowFilter.regexFilter("(?i)" + movie, 2),
                RowFilter.regexFilter("(?i)" + room, 3)
            ));
        }
        sorter.setRowFilter(filter);
    }
} 